plugins {
    id 'com.gradleup.shadow' version '8.3.6'
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

// Versioning
def versionNumber = '0.0'
def versionType = 'DEV' // RELEASE | BETA | ALPHA | DEV
def versionMarker = versionType.charAt(0)

group = 'it.italiandudes'
version = versionNumber+versionMarker

// Repository List
repositories {
    mavenCentral()
    flatDir {
        dirs 'lib'
    }
}

// JavaFX Configuration
javafx {
    version = "21.0.7"
    modules = [
            'javafx.base',
            'javafx.controls',
            'javafx.graphics',
            'javafx.fxml',
            'javafx.swing',
            'javafx.media'
    ]
}

// Dependencies
dependencies {
    compileOnly 'org.jetbrains:annotations:26.0.2-1'
    compileOnly 'org.projectlombok:lombok:1.18.42'
    annotationProcessor 'org.projectlombok:lombok:1.18.42'
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'commons-io:commons-io:2.20.0'
    implementation 'commons-codec:commons-codec:1.19.0'
    implementation 'it.italiandudes:idl:1.3.3'
    implementation 'org.json:json:20250517'
    implementation 'org.xerial:sqlite-jdbc:3.50.3.0'
    implementation 'org.slf4j:slf4j-nop:2.0.16'
}

// Main Build Configuration
shadowJar {
    mainClassName = 'it.italiandudes.hackathon2025.Hackathon2025'
    manifest {
        attributes "Main-Class" : mainClassName
        attributes "Title" : "Hackathon2025"
        attributes "Vendor" : "ItalianDudes"
        attributes "Version" : archiveVersion.get()
        attributes "Version-Number" : archiveVersion.get()
        attributes "Version-Type" : versionType
        attributes "Version-Marker" : versionMarker
        attributes "Timestamp" : new Date().format("dd/MM/yyyy HH:mm:ss.sss")
        attributes "ID-Launcher-Enabled" : false
    }
    archiveFileName = getRootDir().getName() + "-" + archiveVersion.get() + ".jar"
}

// Dev Tasks
tasks.register('buildJar') {
    dependsOn shadowJar
    group = "Build"
    description = "Build and assemble the project for the current platform"
}

tasks.register('runClient', Exec) {
    dependsOn buildJar
    group = "Execution"
    description = "Build, assemble and run the project for the current platform"
    standardInput = System.in
    commandLine "java", "-jar", jar.archiveFile.get()
}


// Deployment Tasks
tasks.register('deployJarForLinux') {
    def platform = 'linux'
    javafx.platform = platform
    shadowJar {
        manifest {
            attributes "Target-Platform": platform
        }
        archiveFileName = getRootDir().getName() + "-" + archiveVersion.get() + "-" + platform.toUpperCase() + ".jar"
    }
    dependsOn shadowJar
    group = "Build"
    description = "Deploy for " + platform
}

tasks.register('deployJarForWindows') {
    def platform = 'windows'
    javafx.platform = platform
    shadowJar {
        manifest {
            attributes "Target-Platform": platform
        }
        archiveFileName = getRootDir().getName() + "-" + archiveVersion.get() + "-" + platform.toUpperCase() + ".jar"
    }
    dependsOn shadowJar
    group = "Build"
    description = "Deploy for " + platform
}

tasks.register('deployJarForMac') {
    def platform = 'mac'
    javafx.platform = platform
    shadowJar {
        manifest {
            attributes "Target-Platform": platform
        }
        archiveFileName = getRootDir().getName() + "-" + archiveVersion.get() + "-" + platform.toUpperCase() + ".jar"
    }
    dependsOn shadowJar
    group = "Build"
    description = "Deploy for " + platform
}

tasks.register('deployJarForMacAArch64') {
    def platform = 'mac-aarch64'
    javafx.platform = platform
    shadowJar {
        manifest {
            attributes "Target-Platform": platform
        }
        archiveFileName = getRootDir().getName() + "-" + archiveVersion.get() + "-" + platform.toUpperCase() + ".jar"
    }
    dependsOn shadowJar
    group = "Build"
    description = "Deploy for " + platform
}